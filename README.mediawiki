=kurama=

'''Version:''' 0.2.0

'''Description:''' Simple Static site generator written in Rust

'''Author:''' Bryce Campbell

'''Copyright:''' 2022

'''LICENSE:''' See LICENSE

While there are many static site generators out there, 
one of which also uses a Jinja-like templating engine, 
I wanted a system in which I could 
specify configuration in the JSON format and 
utilizing Jinja, 
so that I could migrate my own website from 
<a href="https://blog.getpelican.com/">Pelican</a> 
with minimal effort, 
and break up the navigation from general configuration.

This static site generator is my homebrewed solution to that trouble.

==Version History==

<dl>
<dt style="font-weight:bold">0.2.0</dt>
<dd>
<p>Minor Update.</p>
<p>Update dependencies and break code into separate modules.</p>
<p>Because of the changes, 
this program will only compile with Rust edition 2024 or later.</p>
<p>To Be Released Jul 7, 2025</p>
</dd>
<dt style="font-weight:bold">0.1.1</dt>
<dd>
<p>Minor Update.</p>
<p>Add naive file watching to dev server.</p>
<p>Released Feb. 16, 2022</p>
</dd>
<dt style="font-weight:bold">0.1</dt>
<dd>
<p>Initial release.</p>
<p>Released Feb. 15, 2022</p>
</dd>
</dl>

==Installing==

To install this application, 
download the appropriate installer file 
and install it like you would typically do.

The mac package is both both Intel and Apple Silicon macs.

==Create Website==

There are two ways of create a website, dependeing on what you want.

If you want to create a new directory to hold your website files, you can simply do this:

<pre>
kurama create path/to/directory
</pre>

This will create a folder with the same file hierarchy as seen below, 
except for the <strong>links.json</strong> and output folder. 
All nonexisting folders should be created with the site folder.

If you want to make the current working directory 
the location of your site files, 
that can be done with something as simple as the following:

<pre>
kurama init
</pre>

This will create all necessary folders and generate a config file.

==Build Website==

To build the website, after getting everything into place, 
run the following in the directory containing your site files.

<pre>
kurama generate
</pre>

This will create an output directory, 
which contained the generated HTML files 
and the assets that were copied over.

==Preview Website==

If you would like to preview your website before publishing it,
run the following in the directory containing your site files:

<pre>
kurama serve
</pre>

This starts a server on your local machine that listens to any incoming traffic on port 8080.

The content is served from the output directory.

The server has a default index of 
<strong>index.html</strong>.

While the server is running, 
the output folder will be recreated every 10 seconds, 
so changes made to the content will be visible shortly after saving.

==File Hierarchy==

The expected structure of a website is as follows:

<pre>
hello
|_assets
  |_css
  |_js
  |_images
|_content
|_templates
|_output
|_config.json
|_links.json
</pre>

The templates folder contains the files to be used to layout your pages. 
All files in here are automatically loaded in when the site gets generated
and are expected to have html extensions.

As of right now, 
the only template file required is <strong>page.html</strong>, 
which is used to take page content and generate the HTML.

The content folder houses the webpages for the site and 
can have any extensions, though the program expects Markdown content.

config.json is used to set site settings, such as the name of the site.

links.json is used for menus and navigation. Depending on the structure presented in the links file, 
you will either get a list of links or a list of links broken up into sections.

The assets folder holds files that are necessary for the website 
and are copied over as is to the <strong>output</strong> folder, 
which will contain the files that can be uploaded to a web host.

However, the assets folder can only contain the folders as seen above in 
the hierarchy. 

There can be subfolders though, which <strong>should</strong> get copied over as well, but I am uncertain 
if those files will get served by the serve included in this project.

==Creating Pages==

Pages are created like this inside the content folder:

<pre>
---
title: Hello, World!
slug: index
---
# Welcome to oblivion!
</pre>

<strong>title</strong> sets the page's title 
and the <strong>slug</strong> sets the output filename, which the program will append 
<strong>html</strong> upon generation.

The three dashes seen are manadatory, 
as that separates page information from the content of the page.

If you so desire, You can use inline HTML for the content.

==Menus/Navigation==

When setting up the website's navigation, 
you do so in two places, which are as follows:

<ul>
<li>The template</li>
<li>links.json</li>
</ul>

===Template===

In the template file, you need something like this:

<pre>
    <nav id="nav">
        {% if sections %}
            <ul>
            {% for section in sections %}
            <li>
                {{ section.name }}
                <ul>
                    {% for link in section.links %}
                        <li><a href="{{ link.url }}">{{ link.name }}</a></li>
                    {% endfor %}
                </ul>
            </li>
            {% endfor %}
            </ul>
        {% elif links %}
        <ul>
        {% for link in links %}
            <li><a href="{{ link.url }}">{{ link.name }}</a></li>
        {% endfor %}
        </ul>
        {% endif %}
    </nav>
</pre>

While this may be a bit long for most needs, 
since one should only need to check for either 
<strong>sections</strong> or <strong>links</strong>, 
this should give you and idea of what to implement for your needs.

===JSON===

The info from above is filled in with the data found in 
<strong>links.json</strong>.

To create sections links, you will do something like the following:

<pre>
[
    {
        "name": "Main",
        "links": [
            {
                "name": "Home",
                "url": "/"
            }
        ]
    }
]
</pre>

This creates a section called <strong>Main</strong> 
with only one link back to the top level of the site.

If you just want a list of links, you will do this instead:

<pre>
    [
        {
            "name": "Home",
            "url": "/"
        }
    ]
</pre>

This creates a link back to the top level of the site on its own.

When the site is generated, 
the contents will be parsed to determine 
the kind of navigation you seek and will send the variable 
<strong>sections</strong> or <strong>links</strong> 
over to your template.

It is <strong>recommended</strong> 
that you choose one of these styles rather than mix them, 
as it makes things easier to maintain and layout.

===Templates===

The templating engine used is called <a href="https://github.com/Keats/tera">Tera</a> template engine, which means Templates created in much the 
same way as they are with 
<a href="https://hyde.github.io/templates/index.html">Hyde</a> and other static site generators that use Jinja templates.

However, unlike Hyde, the only available context objects are: 

<dl>
<dt style="font-weight:bold">site</dt>
<dd>
<p>This gives access to data concerning the website.</p>
<p>You can get the website's title via <pre>site.name</pre>.</p>
</dd>
<dt style="font-weight:bold">page</dt>
<dd>
<p>This give access to details concerning the page.</p>
<p>Things relating to page metadata are accessed via <pre>page.metadata</pre></p>
<p>For example, to grab the title of the page, it is as easy as <pre>page.metadata.title</pre></p>
</dd>
<dt style="font-weight:bold">output_file</dt>
<dd>
<p>This is the file name that the current page will have when created.</p>
<p>This can be used to make helpful navigation for your website.</p>
</dd>
</dl>

To place the page content in a particular area, you would do something like this:

<pre>
{% block content %}
    {{ content }}
{% endblock content %}
</pre>

While it is not necessary for the block itself to be called 
<strong>content</strong>, 
The variable <strong>content</strong> is required because 
that is what the program passes the HTML 
version of the page content to the template.

==Site Configuration==

The site is configured in the <strong>config.json</strong>. 
This hold all data pertaining to the site, 
such as the site's name and tagline.

A minimal config file will look like this:

<pre>
{
    "name": "Hello, World"
}
</pre>

Right now, the configuration is quite minimal with only four keys, 
which are as follows:

<dl>
<dt style="font-weight:bold">name</dt>
<dd>
The name of the website.
</dd>
<dt style="font-weight:bold">tagline</dt>
<dd>
The website's tagline.
</dd>
<dt style="font-weight:bold">url</dt>
<dd>
The website's URL.
</dd>
<dt style="font-weight:bold">author</dt>
<dd>
The website's creator or owner.
</dd>
</dl>

As can be seen above, only the name key is required, 
but as things progress, I may add more keys 
and some of those may become required too.

For now, I am keeping things simple because that is all I need.